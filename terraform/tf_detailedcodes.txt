/*
terraform {
  required_providers {
    netlify = {
      source  = "royge/netlify"
      version = "0.4.2"
    }

    github = {
      source  = "integrations/github"
      version = "4.5.2"
    }
  }
}

* SET THE ENV_VARIABLES: FOR PERSONAL ACCESS KEYS 
provider "netlify" {
  export NETLIFY_TOKEN=<personal_access_token>
}

provider "github" {
  
  export GITHUB_TOKEN=<personal_access_token>
  export GITHUB_OWNER=<github_user_name>
 
  owner = var.github_org_name
}

* CALL THE SSH PUBLIC KEY TO SET BOTH GITHUB AND NETLIFY
resource "netlify_deploy_key" "key" {}

* CONFIGURE THE GITHUB DEPLOYMENT KEYS
resource "github_repository_deploy_key" "portal_deploy_key" {

  # name of the deployment keys
  title      = "Netlify - ${var.github_repo_name}"

  # name of the repository in github
  repository = var.github_repo_name

  # ssh key generated from netlify
  key        = netlify_deploy_key.key.public_key

  # this should be set to false to be able to access the resources from repository
  read_only  = false

  depends_on = [
    netlify_deploy_key.key,
  ]
}

* CONFIGURE GITHUB WEBHOOKS
resource "github_repository_webhook" "portal_web_hook" {

  #github repository to be used
  repository = github_repository_deploy_key.portal_deploy_key.repository

  #github trigger event for automatic integration
  events     = var.github_event_triggers

  # call the netlify API format
  configuration {
    content_type = "json"
    url          = "https://api.netlify.com/hooks/github"
  }

  depends_on = [
    netlify_site.portal_website
  ]
}

* DEFINE THE NETLIFY WEBSITE
resource "netlify_site" "portal_website" {

  # custom name for the netlify website (only applicable for paid customers)
  name = var.netlify_website_name

* CONFIGURE THE INTEGRATION PARAMETERS
  repo {
    # build file generated by framework build command and it's location
    dir           = var.netlify_npm_build_path

    # framework build command
    command       = var.netlify_npm_build_command

    # github repository branch to be used in integration
    repo_branch   = var.github_repo_branch

    # ssh key id generated from netlify
    deploy_key_id = netlify_deploy_key.key.public_key

    # name of the VCS (ex. github)
    provider      = "github"

    # path of the repository. usually organization_name/repo_name ex. jarylolz12/colorPicker
    repo_path     = "${var.github_org_name}/${github_repository_deploy_key.portal_deploy_key.repository}"
  }

  depends_on = [
    netlify_deploy_key.key
  ]
}

* CREATE A MANUAL TRIGGER LINK FOR FAILSAFE PURPOSES
resource "netlify_build_hook" "portal_manual_trigger" {
 
  # netlify site id
  site_id = netlify_site.portal_website.id

  # github repository branch to be used when invoking this manual trigger
  branch  = netlify_site.portal_website.repo[0].repo_branch

  # name of the manual trigger
  title   = "${netlify_site.portal_website.repo[0].repo_branch} Manual Build Trigger"
}

*/

==================VARIABLES==================

variable "github_repo_name" {
  type        = string
  description = "Github repository name"
  default     = "colorPicker"
}

variable "github_repo_branch" {
  type        = string
  description = "Github repository branch name"
  default     = "testGcp"
}

variable "github_org_name" {
  type        = string
  description = "Github Organization or Username if not in the Organization"
  default     = "jarylolz12"
}

variable "github_event_triggers" {
  type        = list(string)
  description = "List/Array of events to trigger the Integration ex. push"
  default     = ["push"]
}

variable "netlify_website_name" {
  type        = string
  description = "custom name for netlify website"
  default     = ""
}

variable "netlify_npm_build_command" {
  type        = string
  description = "npm command to start the build"
  default     = "npm start"
}

variable "netlify_npm_build_path" {
  type        = string
  description = "path to 'dist' or equivalent folder generated from framework build command"
  default     = "/" # "dist"
}
